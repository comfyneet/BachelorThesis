@using System.Text
@using RiceDoctor.DatabaseManager
@using RiceDoctor.Shared
@using Attribute = RiceDoctor.OntologyManager.Attribute
@model RiceDoctor.OntologyManager.Individual
@{
    var attributeValues = (IReadOnlyDictionary<Attribute, IReadOnlyCollection<string>>) ViewData["AttributeValues"];
    var articles = (List<KeyValuePair<Article, double>>) ViewData["Articles"];

    ViewData["Title"] = "Thể hiện " + Model;
    ViewData["OntologyPage"] = true;

    var tmpNearSynonyms = attributeValues?.Where(a => a.Key.Id == "term").ToList();
    List<string> nearSynonyms = null;
    if (tmpNearSynonyms != null && tmpNearSynonyms.Count > 0)
    {
        nearSynonyms = new List<string>();
        foreach (var pair in tmpNearSynonyms)
        {
            nearSynonyms.AddRange(pair.Value);
        }
    }

    var relativeTerms = ((IReadOnlyCollection<string>) ViewData["RelatableTerms"])?.ToList();

    var visibleValues = attributeValues?
        .Where(a => !new List<string> {"definition", "name", "article", "term"}.Contains(a.Key.Id))
        .ToList();
}

<div class="row">
<div class="col-md-12">
<ul class="nav nav-tabs">
    <li role="presentation" class="active">
        <a asp-controller="Ontology" asp-action="Individual" asp-route-individualName="@Model.Id">Thông tin dạng tóm tắt</a>
    </li>

    @if (attributeValues != null)
    {
        foreach (var pair in attributeValues)
        {
            if (pair.Key.Id == "article")
            {
                <li role="presentation">
                    <a asp-controller="Ontology" asp-action="Article" asp-route-individualName="@Model.Id">
                        Thông tin dạng bài viết
                    </a>
                </li>

                break;
            }
        }
    }
</ul>

<h2>
    <span class="glyphicon glyphicon-info-sign"></span>
    @ViewData["Title"]
</h2>

<div class="row">
    <div class="col-md-3">
        <section style="border-radius: 10px; border-style: dotted">
            <h4>Mục lục</h4>
            <ol>
                <li>
                    <a href="#GioiThieu">Giới thiệu</a>
                </li>
                @if (visibleValues != null)
                {
                    foreach (var pair in visibleValues)
                    {
                        <li>
                            <a href="#@pair.Key.Id">
                                <span class="glyphicon glyphicon-font"></span>
                                @(pair.Key.Label == null ? pair.Key.Id : pair.Key.Label.ToUpperFirstLetter())
                            </a>
                        </li>
                    }
                }
                @if (nearSynonyms != null || relativeTerms != null)
                {
                    <li>
                        <a href="#TuVung">Từ vựng liên quan</a>
                    </li>
                }
                @if (articles != null)
                {
                    <li>
                        <a href="#TaiLieu">Tài liệu liên quan</a>
                    </li>
                }
            </ol>
        </section>
    </div>

    <div class="col-md-8 col-md-offset-1">
        <section>
            <h4 id="GioiThieu">Giới thiệu</h4>
            @if (Model.GetAllClasses() == null && Model.GetRelationValues() == null)
            {
                <p>Không tìm thấy</p>
            }

            @if (attributeValues != null)
            {
                foreach (var pair in attributeValues)
                {
                    if (pair.Key.Id == "definition")
                    {
                        foreach (var definition in pair.Value)
                        {
                            <p>@Html.Raw(definition)</p>
                        }
                    }
                    else if (pair.Key.Id == "name")
                    {
                        var names = pair.Value.Where(n => n != Model.ToString()).ToList();
                        if (names.Count > 0)
                        {
                            var namesSb = new StringBuilder();
                            <p>
                                @Model còn có tên gọi khác là
                                @for (var i = 0; i < names.Count; ++i)
                                {
                                    if (names.Count > 1 && i == names.Count - 1)
                                    {
                                        namesSb.Append(" và");
                                    }
                                    else if (i > 0)
                                    {
                                        namesSb.Append(',');
                                    }
                                    namesSb.Append($" {names[i]}");
                                }
                                @namesSb.
                            </p>
                        }
                    }
                }
            }

            @if (Model.GetAllClasses() != null)
            {
                var allClasses = Model.GetAllClasses().ToList();
                var directClass = Model.GetDirectClass();
                allClasses.Remove(directClass);
                allClasses.Insert(0, directClass);
                var allClassesSb = new StringBuilder();
                <p typeof="rdfs:Class">
                    @Model là thể hiện của lớp
                    @for (var i = 0; i < allClasses.Count; ++i)
                    {
                        if (allClasses.Count > 1 && i == allClasses.Count - 1)
                        {
                            allClassesSb.Append(" và");
                        }
                        else if (i > 0)
                        {
                            allClassesSb.Append(',');
                        }
                        allClassesSb.Append($" <a href=\"{Url.Action("Class", "Ontology", new {className = allClasses[i].Id})}\" resource=\"{Context.Request.GetBaseUrl()}Ontology/Class?className={allClasses[i].Id}\"> ");
                        if (i == 0)
                        {
                            allClassesSb.Append($"<strong property=\"rdfs:label\">{allClasses[i]}</strong>");
                        }
                        else
                        {
                            allClassesSb.Append($"<span property=\"rdfs:label\">{allClasses[i]}</span>");
                        }
                        allClassesSb.Append("</a>");
                    }
                    @Html.Raw(allClassesSb).
                </p>
            }

            @if (Model.GetRelationValues() != null)
            {
                foreach (var pair in Model.GetRelationValues())
                {
                    var relation = pair.Key.GetComment() ?? pair.Key.ToString();
                    var values = pair.Value.ToList();
                    var valuesSb = new StringBuilder();
                    for (var i = 0; i < values.Count; ++i)
                    {
                        if (values.Count > 1 && i == values.Count - 1)
                        {
                            valuesSb.Append(" và");
                        }
                        else if (i > 0)
                        {
                            valuesSb.Append(',');
                        }
                        valuesSb.Append($" <a href=\"{Url.Action("Class", "Ontology", new {className = values[i].Id})}\"> {values[i]}</a>");
                    }

                    <p>
                        @Model <a asp-controller="Ontology" asp-action="Relation" asp-route-relationName="@pair.Key.Id">@relation</a> @Html.Raw(valuesSb).
                    </p>
                }
            }
        </section>
    </div>
</div>

<hr/>

@if (visibleValues != null)
{
    foreach (var pair in visibleValues)
    {
        <section typeof="rdfs:Property" resource="@($"{Context.Request.GetBaseUrl()}Ontology/Attribute?attributeName={pair.Key.Id}")">
            <h4 id="@pair.Key.Id">
                <a asp-controller="Ontology" asp-action="Attribute" asp-route-attributeName="@pair.Key.Id" property="rdfs:label">
                    @(pair.Key.Label == null ? pair.Key.Id : pair.Key.Label.ToUpperFirstLetter())
                </a>
            </h4>

            @if (pair.Key.GetComment() != null)
            {
                <p>@pair.Key.GetComment() @Model.</p>
            }
            @if (pair.Key.Id == "image")
            {
                <div>
                    @foreach (var value in pair.Value)
                    {
                        <div>
                            <img src="~/images/@value" class="img-responsive" alt="@Model"/>
                        </div>
                    }
                </div>
            }
            else
            {
                <div>
                    @foreach (var value in pair.Value)
                    {
                        <p>@Html.Raw(value)</p>
                    }
                </div>
            }
        </section>

        <hr/>
    }
}

@if (nearSynonyms != null || relativeTerms != null)
{
    <section>
        <h4 id="TuVung">Từ vựng liên quan</h4>

        @if (nearSynonyms != null)
        {
            var nearSynonymsSb = new StringBuilder();
            <p>
                @for (var i = 0; i < nearSynonyms.Count; ++i)
                {
                    if (nearSynonyms.Count > 1 && i == nearSynonyms.Count - 1)
                    {
                        nearSynonymsSb.Append(" và");
                    }
                    else if (i > 0)
                    {
                        nearSynonymsSb.Append(',');
                    }
                    nearSynonymsSb.Append($" {nearSynonyms[i]}");
                }
                @Model có các từ gần nghĩa là @nearSynonymsSb.
            </p>
        }

        @if (relativeTerms != null)
        {
            var relativeTermsSb = new StringBuilder();
            <p>
                @for (var i = 0; i < relativeTerms.Count; ++i)
                {
                    if (relativeTerms.Count > 1 && i == relativeTerms.Count - 1)
                    {
                        relativeTermsSb.Append(" và");
                    }
                    else if (i > 0)
                    {
                        relativeTermsSb.Append(',');
                    }
                    relativeTermsSb.Append($" {relativeTerms[i]}");
                }
                @Model có các từ vựng liên quan là @relativeTermsSb.
            </p>
        }
    </section>

    <hr/>
}

@if (articles != null)
{
    <section>
        <h4 id="TaiLieu">Tài liệu liên quan</h4>

        @foreach (var article in articles)
        {
            <p>
                <a href="@Html.Raw(article.Key.Url)">@article.Key.Title</a> - (@article.Key.Website.Name) @article.Key.RetrievedDate.ToString("dd/MM/yyyy")
            </p>
        }
    </section>

    <hr/>
}

</div>
</div>